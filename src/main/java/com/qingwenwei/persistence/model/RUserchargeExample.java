package com.qingwenwei.persistence.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class RUserchargeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public RUserchargeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andChargedateIsNull() {
            addCriterion("chargedate is null");
            return (Criteria) this;
        }

        public Criteria andChargedateIsNotNull() {
            addCriterion("chargedate is not null");
            return (Criteria) this;
        }

        public Criteria andChargedateEqualTo(Date value) {
            addCriterionForJDBCDate("chargedate =", value, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateNotEqualTo(Date value) {
            addCriterionForJDBCDate("chargedate <>", value, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateGreaterThan(Date value) {
            addCriterionForJDBCDate("chargedate >", value, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("chargedate >=", value, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateLessThan(Date value) {
            addCriterionForJDBCDate("chargedate <", value, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("chargedate <=", value, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateIn(List<Date> values) {
            addCriterionForJDBCDate("chargedate in", values, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateNotIn(List<Date> values) {
            addCriterionForJDBCDate("chargedate not in", values, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("chargedate between", value1, value2, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargedateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("chargedate not between", value1, value2, "chargedate");
            return (Criteria) this;
        }

        public Criteria andChargeidIsNull() {
            addCriterion("chargeid is null");
            return (Criteria) this;
        }

        public Criteria andChargeidIsNotNull() {
            addCriterion("chargeid is not null");
            return (Criteria) this;
        }

        public Criteria andChargeidEqualTo(Integer value) {
            addCriterion("chargeid =", value, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidNotEqualTo(Integer value) {
            addCriterion("chargeid <>", value, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidGreaterThan(Integer value) {
            addCriterion("chargeid >", value, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidGreaterThanOrEqualTo(Integer value) {
            addCriterion("chargeid >=", value, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidLessThan(Integer value) {
            addCriterion("chargeid <", value, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidLessThanOrEqualTo(Integer value) {
            addCriterion("chargeid <=", value, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidIn(List<Integer> values) {
            addCriterion("chargeid in", values, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidNotIn(List<Integer> values) {
            addCriterion("chargeid not in", values, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidBetween(Integer value1, Integer value2) {
            addCriterion("chargeid between", value1, value2, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargeidNotBetween(Integer value1, Integer value2) {
            addCriterion("chargeid not between", value1, value2, "chargeid");
            return (Criteria) this;
        }

        public Criteria andChargetimeIsNull() {
            addCriterion("chargetime is null");
            return (Criteria) this;
        }

        public Criteria andChargetimeIsNotNull() {
            addCriterion("chargetime is not null");
            return (Criteria) this;
        }

        public Criteria andChargetimeEqualTo(Date value) {
            addCriterion("chargetime =", value, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeNotEqualTo(Date value) {
            addCriterion("chargetime <>", value, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeGreaterThan(Date value) {
            addCriterion("chargetime >", value, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeGreaterThanOrEqualTo(Date value) {
            addCriterion("chargetime >=", value, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeLessThan(Date value) {
            addCriterion("chargetime <", value, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeLessThanOrEqualTo(Date value) {
            addCriterion("chargetime <=", value, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeIn(List<Date> values) {
            addCriterion("chargetime in", values, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeNotIn(List<Date> values) {
            addCriterion("chargetime not in", values, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeBetween(Date value1, Date value2) {
            addCriterion("chargetime between", value1, value2, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargetimeNotBetween(Date value1, Date value2) {
            addCriterion("chargetime not between", value1, value2, "chargetime");
            return (Criteria) this;
        }

        public Criteria andChargeamtIsNull() {
            addCriterion("chargeamt is null");
            return (Criteria) this;
        }

        public Criteria andChargeamtIsNotNull() {
            addCriterion("chargeamt is not null");
            return (Criteria) this;
        }

        public Criteria andChargeamtEqualTo(BigDecimal value) {
            addCriterion("chargeamt =", value, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtNotEqualTo(BigDecimal value) {
            addCriterion("chargeamt <>", value, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtGreaterThan(BigDecimal value) {
            addCriterion("chargeamt >", value, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("chargeamt >=", value, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtLessThan(BigDecimal value) {
            addCriterion("chargeamt <", value, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtLessThanOrEqualTo(BigDecimal value) {
            addCriterion("chargeamt <=", value, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtIn(List<BigDecimal> values) {
            addCriterion("chargeamt in", values, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtNotIn(List<BigDecimal> values) {
            addCriterion("chargeamt not in", values, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("chargeamt between", value1, value2, "chargeamt");
            return (Criteria) this;
        }

        public Criteria andChargeamtNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("chargeamt not between", value1, value2, "chargeamt");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table r_usercharge
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table r_usercharge
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}